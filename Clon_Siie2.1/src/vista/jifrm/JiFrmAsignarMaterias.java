/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vista.jifrm;

import clases.ConexionBD;

import clases.Base_De_Datos;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;

/**
 *
 * @author cymaniatico
 */
public class JiFrmAsignarMaterias extends javax.swing.JInternalFrame {
 
    /**
     * Creates new form JiFrmPrueba
     */

    public JiFrmAsignarMaterias( String alumno,Base_De_Datos basedatos) {
        initComponents();
        this.getContentPane().setBackground(new Color(214, 245, 255));
        cargarDocentesDisponibles();  
        cargarMateriasDisponibles();
        
    }
    
    private void cargarDocentesDisponibles() {
        comboDocentes.removeAllItems();
        
        String sql = "call listado_docentes()";

        try (Connection conn = ConexionBD.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            boolean hayDocentes = false;
            while (rs.next()) {
                
                String docente = rs.getInt("id") + " - " +
                                 rs.getString("nombre")+ " " + rs.getString("apellido");
                comboDocentes.addItem(docente);
                hayDocentes = true;
            }

            if (!hayDocentes) {
                comboDocentes.addItem("⚠ No hay docentes libres");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error cargando docentes: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cargarMateriasDisponibles() {
        comboMaterias.removeAllItems();

        String sql = "call Materias_disponibles()";

        try (Connection conn = ConexionBD.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            boolean hayMaterias = false;
            while (rs.next()) {
                String materia = rs.getString("nombre_materia");
                comboMaterias.addItem(materia);
                hayMaterias = true;
            }

            if (!hayMaterias) {
                comboMaterias.addItem("⚠ No hay materias disponibles");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error cargando materias: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }




    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboDocentes = new javax.swing.JComboBox<>();
        btnAsignar = new javax.swing.JButton();
        comboMaterias = new javax.swing.JComboBox<>();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);

        jLabel1.setText("Materias disponibles");

        jLabel2.setText("asignar profesor ");

        comboDocentes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnAsignar.setText("asignar Docente");
        btnAsignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAsignarActionPerformed(evt);
            }
        });

        comboMaterias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(comboMaterias, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboDocentes, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89)
                        .addComponent(btnAsignar))
                    .addComponent(jLabel2))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboDocentes, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAsignar)
                    .addComponent(comboMaterias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAsignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAsignarActionPerformed
            String materiaSeleccionada = (String) comboMaterias.getSelectedItem();
    String docenteSeleccionado = (String) comboDocentes.getSelectedItem();
    int idAsignaturaTexto = 0;

    if (materiaSeleccionada == null || materiaSeleccionada.startsWith("⚠")) {
        JOptionPane.showMessageDialog(this,
                "⚠ Debes seleccionar una materia válida.",
                "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    if (docenteSeleccionado == null || docenteSeleccionado.startsWith("⚠")) {
        JOptionPane.showMessageDialog(this,
                "⚠ Debes seleccionar un docente válido.",
                "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try (Connection conn = ConexionBD.getConnection()) {
        conn.setAutoCommit(false);

        int idDocente = Integer.parseInt(docenteSeleccionado.split(" - ")[0]);

        // Obtener ID de la materia
        String sqlGetMateria = "call id_materia (?)";
        try (PreparedStatement stmt = conn.prepareStatement(sqlGetMateria)) {
            stmt.setString(1, materiaSeleccionada);
            ResultSet rs = stmt.executeQuery();

            if (!rs.next()) {
                throw new Exception("La materia seleccionada ya fue asignada o no existe.");
            }

            idAsignaturaTexto = rs.getInt("id");
        }

        // __________________________________________________________________
        String sqlValidar = "SELECT existe_asignacion(?, ?) AS yaExiste";
        try (PreparedStatement stmt = conn.prepareStatement(sqlValidar)) {
            stmt.setInt(1, idDocente);
            stmt.setInt(2, idAsignaturaTexto);
            ResultSet rs = stmt.executeQuery();
            if (rs.next() && rs.getInt("yaExiste") == 1) {
                JOptionPane.showMessageDialog(this,
                        "⚠ Este docente ya tiene asignada la materia seleccionada.",
                        "Advertencia", JOptionPane.WARNING_MESSAGE);
                return; // Sale sin insertar
            }
        }
        // __________________________________________________________________

        // Asignar la materia al docente
        String sqlUpdateDocente = "call asignar_m_a_p(?, ?)";
        try (PreparedStatement stmt = conn.prepareStatement(sqlUpdateDocente)) {
            stmt.setInt(1, idDocente);
            stmt.setInt(2, idAsignaturaTexto);
            stmt.executeUpdate();
        }

        conn.commit();

        JOptionPane.showMessageDialog(this,
                "✅ Materia '" + materiaSeleccionada + "' asignada correctamente al docente.",
                "Éxito", JOptionPane.INFORMATION_MESSAGE);

        // Limpiar y recargar
        cargarDocentesDisponibles();
        cargarMateriasDisponibles();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this,
                "❌ Error al asignar la materia: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnAsignarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAsignar;
    private javax.swing.JComboBox<String> comboDocentes;
    private javax.swing.JComboBox<String> comboMaterias;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
