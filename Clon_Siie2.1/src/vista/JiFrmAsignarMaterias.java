/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vista;

import clases.ConexionBD;

import clases.Base_De_Datos;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;

/**
 *
 * @author cymaniatico
 */
public class JiFrmAsignarMaterias extends javax.swing.JInternalFrame {
 
       private final String alumno;
       private final Base_De_Datos baseDatos;
        
    /**
     * Creates new form JiFrmPrueba
     */

    public JiFrmAsignarMaterias( String alumno,Base_De_Datos basedatos) {
        initComponents();
        this.baseDatos = basedatos;
        this.alumno = alumno;
        this.getContentPane().setBackground(new Color(214, 245, 255));
        cargarDocentesDisponibles();  
        cargarMateriasDisponibles();
    }
    
     private void cargarDocentesDisponibles() {
        comboDocentes.removeAllItems();

        String sql = "SELECT * FROM materias WHERE materia IS NULL OR materia = 'sin asignatura'";

        try (Connection conn = ConexionBD.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            
            boolean hayDocentes = false;
            while (rs.next()) {
                String nombreCompleto = rs.getString("nombre") ;
                comboDocentes.addItem(nombreCompleto);
                hayDocentes = true;
            }

            if (!hayDocentes) {
                comboDocentes.addItem("⚠ No hay docentes libres");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error cargando docentes: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
     
   private void cargarMateriasDisponibles() {
    comboMaterias.removeAllItems();

    // ✅ Selecciona solo materias que no tienen docente asignado
    String sql = "SELECT nombre FROM materias_existentes WHERE materias_existentes.estado = 'libre'";

    try (Connection conn = ConexionBD.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery()) {

        boolean hayMaterias = false;
        while (rs.next()) {
            String nombreMateria = rs.getString("nombre");
            comboMaterias.addItem(nombreMateria);
            hayMaterias = true;
        }

        if (!hayMaterias) {
            comboMaterias.addItem("⚠ No hay materias disponibles");
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this,
                "Error cargando materias: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
    }
}



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboDocentes = new javax.swing.JComboBox<>();
        btnAsignar = new javax.swing.JButton();
        comboMaterias = new javax.swing.JComboBox<>();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);

        jLabel1.setText("Materias disponibles");

        jLabel2.setText("asignar profesor ");

        comboDocentes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnAsignar.setText("asignar Docente");
        btnAsignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAsignarActionPerformed(evt);
            }
        });

        comboMaterias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboMaterias, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboDocentes, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAsignar)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboDocentes, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAsignar)
                    .addComponent(comboMaterias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAsignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAsignarActionPerformed
         String materiaSeleccionada = (String) comboMaterias.getSelectedItem();
    String docenteSeleccionado = (String) comboDocentes.getSelectedItem();

    if (materiaSeleccionada == null || materiaSeleccionada.startsWith("⚠")) {
        JOptionPane.showMessageDialog(this,
                "⚠ Debes seleccionar una materia válida.",
                "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    if (docenteSeleccionado == null || docenteSeleccionado.startsWith("⚠")) {
        JOptionPane.showMessageDialog(this,
                "⚠ Debes seleccionar un docente válido.",
                "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try (Connection conn = ConexionBD.getConnection()) {
        // ✅ Actualizar la tabla materias
        String sql = "UPDATE materias SET materia = ? WHERE nombre = ? AND (materia = 'sin asignatura' OR materia IS NULL)";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, materiaSeleccionada);
            stmt.setString(2, docenteSeleccionado);

            int filas = stmt.executeUpdate();
            if (filas > 0) {
                JOptionPane.showMessageDialog(this,
                        "✅ Se asignó la materia '" + materiaSeleccionada +
                        "' al docente '" + docenteSeleccionado + "'.",
                        "Éxito", JOptionPane.INFORMATION_MESSAGE);
                
                // Opcional: refrescar listas después de asignar
                cargarDocentesDisponibles();
                cargarMateriasDisponibles();
            } else {
                JOptionPane.showMessageDialog(this,
                        "⚠ No se pudo asignar la materia. Verifica los datos.",
                        "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this,
                "❌ Error al asignar la materia: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
    }
  
    }//GEN-LAST:event_btnAsignarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAsignar;
    private javax.swing.JComboBox<String> comboDocentes;
    private javax.swing.JComboBox<String> comboMaterias;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
